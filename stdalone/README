There are seven different ways to run a standalone program.

1. Simulator, instant loading:
   Load the program with the '-l' command-line option into the
   simulated memory; use '-a 0x10000' to set the load address.
   Each Makefile has a target 'run' to automate this.

2. Simulator, monitor, load server:
   Start the simulator with the monitor in ROM and a dangling
   serial line (this will happen automatically if you use the
   Makefile target 'run-sim-ser' in the directory build/run).
   Note the serial line's device name, e.g., '/dev/pts/20'. Run
   the load server in another terminal. Specify the serial line's
   device name as serial port, and choose a standalone program
   to be loaded. Here is an example command line, typed from
   within the directory build/run:
      ../bin/loadserv /dev/pts/20 ../stdalone/dhrystone.exo
   Now start the monitor. In the monitor's terminal window type
   'load 1'. This will load and execute the standalone program.
   Use 'load 1 *' for loading but not starting the program.

3. Simulator, monitor, disk server:
   NOTE: You must have installed the project 'eos32-on-eco32'.
         It can be downloaded from here:
         https://github.com/hgeisse/eos32-on-eco32
         Build it by running 'make' in its top directory.
   NOTE: Remember to re-build the disk image by running
         'make clean ; make' in the directory build/run.
   Start the simulator with the monitor in ROM and a dangling
   serial line (this will happen automatically if you use the
   Makefile target 'run-sim-ser' in the directory build/run).
   Note the serial line's device name, e.g., '/dev/pts/20'. Run
   the disk server in another terminal. Specify the serial line's
   device name as serial port, and 'disk.img' as disk image file.
   Here is an example command line, typed from within the directory
   build/run:
      ../bin/diskserv /dev/pts/20 disk.img
   Now start the monitor. In the monitor's terminal window type
   'boot 1'. Choose the partition with the bootable EOS32 file
   system, and enter '/boot/<progname.bin>' as the 'path to kernel'.

4. Simulator, monitor, disk (or SD card):
   NOTE: You must have installed the project 'eos32-on-eco32'.
         It can be downloaded from here:
         https://github.com/hgeisse/eos32-on-eco32
         Build it by running 'make' in its top directory.
   NOTE: Remember to re-build the disk image by running
         'make clean ; make' in the directory build/run.
   Start the simulator with the monitor in ROM and 'disk.img' as
   the disk image (this will happen automatically if you use the
   Makefile target 'run-sim-dsk' or 'run-sim-sdc' in the directory
   build/run). Start the monitor and boot the disk with 'boot 0'
   (or 'boot 2' for the SD card). Choose the partition with the
   bootable EOS32 file system, and enter '/boot/<progname.bin>'
   as the 'path to kernel'.

5. FPGA, monitor, load server:
   Power up the FPGA board and reset the ECO32. You should see the
   monitor's prompt in the terminal window which is connected to
   the board's first serial line. Then load a standalone program
   with the help of the load server, which uses the board's second
   serial line. Here is an example command line, typed from within
   the directory build/run:
      ../bin/loadserv /dev/ttyUSB1 ../stdalone/dhrystone.exo
   In the monitor's terminal window type 'load 1'. This will load
   and execute the standalone program. Use 'load 1 *' for loading
   but not starting the program.

6. FPGA, monitor, disk server:
   NOTE: You must have installed the project 'eos32-on-eco32'.
         It can be downloaded from here:
         https://github.com/hgeisse/eos32-on-eco32
         Build it by running 'make' in its top directory.
   NOTE: Remember to re-build the disk image by running
         'make clean ; make' in the directory build/run.
   Power up the FPGA board and reset the ECO32. You should see the
   monitor's prompt in the terminal window which is connected to
   the board's first serial line. Then make the disk available for
   use with the help of the disk server, which uses the board's
   second serial line (this will happen automatically if you use the
   Makefile target 'run-server' in the directory build/run). In the
   monitor's terminal window type 'boot 1'. Choose the partition with
   the bootable EOS32 file system, and enter '/boot/<progname.bin>'
   as the 'path to kernel'.

7. FPGA, monitor, disk (or SD card):
   NOTE: You must have installed the project 'eos32-on-eco32'.
         It can be downloaded from here:
         https://github.com/hgeisse/eos32-on-eco32
         Build it by running 'make' in its top directory.
   NOTE: Remember to re-build the disk image by running
         'make clean ; make' in the directory build/run.
   Write the disk image onto a hard disk or an SD card. I use an SD
   card reader/writer for USB. Insert the card reader and note the
   the device under which it is accessible, e.g., /dev/sdb. If any
   partition of the device gets auto-mounted, you should unmount it
   before continuing. Copy the image onto the whole device (do NOT
   copy it into a partition like /dev/sdb1). Here is an example
   command line, typed from within the directory build/run:
      sudo dd if=disk.img of=/dev/sdb
   Remove the SD card from the card reader and insert it into the
   SD card slot of the FPGA board. Power up the board and reset
   the ECO32. You should see the monitor's prompt in the terminal
   window which is connected to the board's first serial line. Boot
   the disk with 'boot 2' for the SD card (use 'boot 0' in case of
   an IDE disk). Choose the partition with the bootable EOS32 file
   system, and enter '/boot/<progname.bin>' as the 'path to kernel'.
