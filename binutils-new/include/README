
Format of Object and Executable Files
-------------------------------------

0) General

The "a.out" file format is used as the format for assembler output
("object files") as well as for linker output ("executable files").
The difference between these two is the size of certain sections of
the file being zero in case of executable files.

The file consists of a header and up to 5 sections:
  - segment table
  - symbol table
  - relocation table
  - object data
  - string space


1) Header

The header specifies the file offsets and sizes of the following
sections, but has itself a fixed size and is always present at
file offset 0:

typedef struct {
  unsigned int magic;		/* must be EXEC_MAGIC */
  unsigned int osegs;		/* offset of segment table in file */
  unsigned int nsegs;		/* number of segment table entries */
  unsigned int osyms;		/* offset of symbol table in file */
  unsigned int nsyms;		/* number of symbol table entries */
  unsigned int orels;		/* offset of relocation table in file */
  unsigned int nrels;		/* number of relocation table entries */
  unsigned int odata;		/* offset of segment data in file */
  unsigned int sdata;		/* size of segment data in file */
  unsigned int ostrs;		/* offset of string space in file */
  unsigned int sstrs;		/* size of string space in file */
  unsigned int entry;		/* entry point (if executable) */
} ExecHeader;

The magic number is used to distinguish executable files from
other file types. This field must have the value EXEC_MAGIC.


2) Segment Table

typedef struct {
  unsigned int name;		/* offset in string space */
  unsigned int offs;		/* offset in segment data */
  unsigned int addr;		/* virtual start address */
  unsigned int size;		/* size of segment in bytes */
  unsigned int attr;		/* segment attributes */
} SegmentRecord;


3) Symbol Table

typedef struct {
  unsigned int name;		/* offset in string space */
  int val;			/* the symbol's value */
  int seg;			/* the symbol's segment, -1: absolute */
  unsigned int attr;		/* symbol attributes */
} SymbolRecord;


4) Relocation Table

typedef struct {
  unsigned int loc;		/* where to relocate */
  int seg;			/* in which segment */
  int typ;			/* relocation type: one of RELOC_xxx */
  int ref;			/* what is referenced */
				/* if symbol flag = 0: segment number */
				/* if symbol flag = 1: symbol number */
  int add;			/* additive part of value */
} RelocRecord;

#define RELOC_H16	0	/* write 16 bits with high part of value */
#define RELOC_L16	1	/* write 16 bits with low part of value */
#define RELOC_R16	2	/* write 16 bits with value relative to PC */
#define RELOC_R26	3	/* write 26 bits with value relative to PC */
#define RELOC_W32	4	/* write full 32 bit word with value */
#define RELOC_SYM	0x100	/* symbol flag, may be added to any RELOC */


5) Object Data


6) String Space


7) Executing an Executable

t.b.d.

After loading the program, execution begins at its entry point.

